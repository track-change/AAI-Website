---
import Layout from "../layouts/Layout.astro";
---

<!-- <Layout title="calendar"> -->
  <div id="calendar-container">
    <div id="calendar-navigation">
      <p class="navigation-btn" onclick="previousMonth()">prev</p>
      <p id="current-month-year"></p>
      <p class="navigation-btn" onclick="nextMonth()">next</p>
      <!-- <svg
        xmlns="http://www.w3.org/2000/svg"
        width="27"
        height="32"
        viewBox="0 0 27 32"
        fill="none"
      >
        <path
          d="M27 16.0001L0 31.5885L1.36279e-06 0.411621L27 16.0001Z"
          fill="black"></path>
      </svg> -->
    </div>

    <div class="calendar" id="calendar-body">
    </div>

    <p><span id="start-date"></span><span id="end-date"></span></p>
  </div>
<!-- </Layout> -->

<style type="scss">
  .calendar {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    justify-items: center;
    align-items: center;
    gap: 16px;
    margin: 0px 144px;

    .calendar-day-label {
      position: sticky;
      text-align: center;
      top: 0;
      padding: 22px 0px;
      // background-color: var(--yellow);
      font-size: var(--caption-font-size);
    }

    .day-label-sun {
      grid-column: 1;
    }
    .day-label-mon {
      grid-column: 2;
    }
    .day-label-tue {
      grid-column: 3;
    }
    .day-label-wed {
      grid-column: 4;
    }
    .day-label-thu {
      grid-column: 5;
    }
    .day-label-fri {
      grid-column: 6;
    }
    .day-label-sat {
      grid-column: 7;
    }

    .calendar-cell {
      position: relative; /* Add position relative to enable positioning day labels */
      padding: 15px 0px;
      text-align: center;
      font-size: var(--h4-font-size);
      cursor: pointer;
      border: 1px solid transparent; /* Set transparent border initially */
      background-color: white;
      box-shadow: 0 0 0 2px transparent; /* Reserve space for box shadow */
      border-radius: 100%;
      // width: 70px;
      height: 64px;
      width: 64px;
    }
    .calendar-cell:not(:empty):hover {
      cursor: pointer;
      box-shadow: 0 0 0 2px black; /* Change box shadow on hover */
      margin: -2px; /* Adjust margin to maintain cell size */
      background-color: white !important;
      color: black !important;
      z-index: 99;
    }

    .selected {
      background-color: black !important; /* Background color for selected dates */
      color: white !important; /* Text color for selected dates */
      box-shadow: 0 0 0 2px black !important; /* Ensure selected dates remain visible */
    }
    .selected-start {
      box-shadow: 0 0 0 2px black !important; /* Box shadow for the beginning selected cell */
    }
  }

  #calendar-container {
    width: 100%;
    margin: 22px 0;

    #calendar-navigation {
      text-align: center;
      margin-bottom: 10px;
      display: flex;
      // background-color: var(--yellow);
      // color:var(--white);
      padding:22px 0;
      justify-content: space-between;
      border-bottom: solid black 2px;

      .navigation-btn {
        display: inline-block;
        // padding: 5px 10px;
        cursor: pointer;
        margin: 0 16px;
      }

      p {
        display: inline;
      }
    }
  }
</style>

<script async>
const calendarBody = document.getElementById("calendar-body");
const startDateSpan = document.getElementById("start-date");
const endDateSpan = document.getElementById("end-date");
const currentMonthYearSpan = document.getElementById("current-month-year");
let startDate = null;
let endDate = null;
let currentDate = new Date();
let currentYear = currentDate.getFullYear(); // Get current year
let currentMonth = currentDate.getMonth(); // Get current month (0-11)

// Create calendar
createCalendar(currentYear, currentMonth);

function createCalendar(year, month) {
  const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  currentMonthYearSpan.textContent = `${getMonthName(month)} ${year}`;

  // Create day labels
  daysOfWeek.forEach((day) => {
    const label = document.createElement("div");
    label.classList.add("calendar-day-label");
    label.textContent = day;
    calendarBody.appendChild(label);
  });

  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  const startingDay = firstDay.getDay();
  const monthLength = lastDay.getDate();

  let day = 1;

  for (let i = 0; i < 6; i++) {
    for (let j = 0; j < 7; j++) {
      const cell = document.createElement("div");
      cell.classList.add("calendar-cell");

      if (i === 0 && j < startingDay) {
        cell.appendChild(document.createTextNode(""));
      } else if (day > monthLength) {
        break;
      } else {
        cell.appendChild(document.createTextNode(day));
        cell.addEventListener("click", selectDate);
        cell.addEventListener("mouseenter", highlightDate);
        cell.addEventListener("mouseleave", removeHighlight);
        cell.setAttribute(
          "data-date",
          year +
          "-" +
          (month + 1).toString().padStart(2, "0") +
          "-" +
          day.toString().padStart(2, "0")
        );
        day++;
      }

      calendarBody.appendChild(cell);
    }
  }
}

function clearCalendarSelection() {
  const cells = document.querySelectorAll(".calendar-cell");
  cells.forEach((cell) => {
    cell.classList.remove("selected", "selected-start");
    cell.style.boxShadow =
      "0 0 0 2px transparent"; /* Reset box-shadow to transparent */
    cell.style.backgroundColor = "transparent";
    cell.style.color = "black";
  });
}

function selectDate(event) {
  const clickedDate = event.target.getAttribute("data-date");

  if (!startDate) {
    startDate = clickedDate;
    endDate = null;
    clearCalendarSelection(); // Clear selection from previous clicks
    highlightSelectedDates(); // Highlight only the starting cell
    updateSelectedDatesSpan();
  } else if (!endDate) {
    if (clickedDate === startDate) {
      // Do nothing if the same cell is clicked again
      return;
    } else if (clickedDate < startDate) {
      endDate = startDate;
      startDate = clickedDate;
    } else {
      endDate = clickedDate;
    }

    clearCalendarSelection();
    highlightSelectedDates();
    updateSelectedDatesSpan();
  } else {
    startDate = clickedDate;
    endDate = null;
    clearCalendarSelection();
    highlightSelectedDates();
    updateSelectedDatesSpan();
  }

  highlightStartCell(); // Highlight the starting cell
}

function highlightStartCell() {
  const startCell = document.querySelector(`[data-date="${startDate}"]`);
  if (startCell) {
    startCell.classList.add("selected-start");
  }
}

function highlightSelectedDates() {
  const cells = document.querySelectorAll(".calendar-cell");
  cells.forEach((cell) => {
    const cellDate = cell.getAttribute("data-date");
    if (cellDate >= startDate && cellDate <= endDate) {
      cell.classList.add("selected");
      cell.style.boxShadow =
        "0 0 0 2px black"; /* Ensure selected dates remain visible */
      cell.style.backgroundColor = "black";
      cell.style.color = "white";
    }
    if (cellDate === startDate) {
      cell.classList.add("selected-start");
    }
  });
}

function updateSelectedDatesSpan() {
  if (endDate) {
    startDateSpan.textContent = `${startDate}`;
    endDateSpan.textContent = `${endDate}`;
  } else if (startDate) {
    startDateSpan.textContent = `${startDate}`;
    endDateSpan.textContent = "";
  } else {
    startDateSpan.textContent = "";
    endDateSpan.textContent = "";
  }
}

function getMonthName(month) {
  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  return monthNames[month];
}

function previousMonth() {
  currentMonth--;
  if (currentMonth < 0) {
    currentMonth = 11;
    currentYear--;
  }
  recreateCalendar();
}

function nextMonth() {
  currentMonth++;
  if (currentMonth > 11) {
    currentMonth = 0;
    currentYear++;
  }
  recreateCalendar();
}

function recreateCalendar() {
  startDate = null;
  endDate = null;
  clearCalendarSelection();
  calendarBody.innerHTML = ''; // Clear the calendar body
  createCalendar(currentYear, currentMonth); // Re-create the calendar
}

function highlightDate(event) {
  if (!event.target.classList.contains("selected")) {
    event.target.style.boxShadow = "0 0 0 2px black";
    event.target.style.backgroundColor = "white";
    event.target.style.color = "black";
  }
}

function removeHighlight(event) {
  if (!event.target.classList.contains("selected")) {
    event.target.style.boxShadow = "0 0 0 2px transparent";
    event.target.style.backgroundColor = "transparent";
    event.target.style.color = "black";
  }
}
</script>
