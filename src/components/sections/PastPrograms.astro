---
import SectionLayout from "../../layouts/SectionLayout.astro";
import { getPrograms } from "../../data/api";
import { urlFor } from "../../utils/image";
import { formatDateRange } from "../../utils/dateFormatting.js";
import type { Program } from "../../data/types";

const programs = await getPrograms();
const currentDate = new Date();
const pastPrograms = programs.filter(
  (program) => new Date(program.endDateTime) < currentDate
);

const programsBySeason: { [key: string]: Program[] } = {};
pastPrograms.forEach((program) => {
  const season = program.season;
  if (!programsBySeason[season]) {
    programsBySeason[season] = [];
  }
  programsBySeason[season].push(program);
});

const seasonValue = {
  Winter: 1,
  Spring: 2,
  Summer: 3,
  Fall: 4,
};

const sortedSeasons = Object.entries(programsBySeason).sort(
  ([seasonA], [seasonB]) => {
    const [seasonNameA, yearA] = seasonA.split(" ");
    const [seasonNameB, yearB] = seasonB.split(" ");

    if (yearA !== yearB) {
      return parseInt(yearB) - parseInt(yearA);
    } else {
      return (
        seasonValue[seasonNameB as keyof typeof seasonValue] -
        seasonValue[seasonNameA as keyof typeof seasonValue]
      );
    }
  }
);
---

<SectionLayout className="past" backGround="var(--white)">
  <h2 class="title">Past Seasons</h2>
  <div class="filters">
    <ul>
      <li>Sort by</li>
      <li>
        <ul>
          <li>Most recent to oldest</li>
          <li>Oldest to most recent</li>
          <li>Alphabetical</li>
        </ul>
      </li>
    </ul>
    <ul>
      <li>Filter by year of participation</li>
      <li>
        <ul>
          <li>All</li>
          <li>2023</li>
          <li>2022</li>
          <li>2021</li>
        </ul>
      </li>
    </ul>

    <ul>
      <li>Filter by last name initials</li>
      <li>
        <ul>
          <li>A</li>
          <li>B</li>
          <li>C</li>
          <li>D</li>
          <li>E</li>
          <li>F</li>
        </ul>
      </li>
    </ul>
  </div>
  <div class="seasons-wrapper">
    {
      sortedSeasons.map(([season, programs]) => (
        <section id={season} class="past-seasons">
          <h2 class="season-title gray-out">{season}</h2>
          <ul class="list is-hidden">
            {programs.map((program) => (
              <li class="list-item">
                <a data-link href={`/programs/${program.slug.current}`}>
                  {program.coverImage && (
                    <img
                      src={urlFor(program.coverImage).url()}
                      alt={program.name}
                    />
                  )}
                  <h6>{program.name}</h6>

                  <ul>
                    <li class="caption">{program.type}</li>
                    <li class="caption">
                      {formatDateRange(
                        `${program.startDateTime}â€”${program.endDateTime}`
                      )}
                    </li>
                  </ul>
                </a>
              </li>
            ))}
          </ul>
        </section>
      ))
    }
  </div>
</SectionLayout>

<style lang="scss">
  h2.title {
    line-height: 0.75;
  }
  .seasons-wrapper {
    display: flex; 
    flex-wrap: wrap;
    column-gap: var(--l-margin);
    // row-gap: var(--s-margin);
  }
  section {
    gap: 0;
    width: fit-content;
    height: fit-content;
    display: flex;
    flex-direction: column;

    // border-top: 1px solid var(--black); 
    // &:last-child {
    //   border-bottom: 1px solid var(--black);
    // }
    .season-title {
      // padding: 8px 0;
      margin-bottom:0.25em;
      cursor: pointer;
      transition: all 100ms ;
    }

    .list {
      padding: 0;
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: flex-start;
      align-items: flex-start;
      gap: var(--s-margin);
      margin-bottom: var(--l-margin);
      // margin: var(--l-margin) 0;
      padding-bottom: var(--l-margin);

      .list-item {
        max-width: 480px;
        h6 {
          line-height: 1;
          margin-top: 0.5em;
        }

        [data-link] {
          display: flex;
          flex-direction: column;
          // gap: 1rem;
          // text-align: center;
          transition: color 100ms var(--ease);
          &:hover {
            img {transform: translateY(-5px);}
            img {transition: transform 100ms var(--ease);}
          }
          .caption {
            text-transform: capitalize;
          }
        }
      }
    }
    .is-hidden {
      display: none;
    }
    .is-black {
      color: black;
    }
  }

  .filters,
  .filters > *,
  .filters > * > *,
  .filters > * > * > *,
  .filters > * > * > * > * {
    display: flex;
    column-gap: 1rem;
    font-size: var(--small-caption-font-size);
  }
  .filters {
    justify-content: space-between;
  }
  .filters > * {
    flex-direction: column;
  }
</style>
<script async>
  const sections = document.querySelectorAll(".past-seasons");

  sections.forEach((section) => {
    const secHeader = section.querySelector(".season-title");
    const secPrograms = section.querySelector(".list");
    secHeader.addEventListener("click", () => {
      secPrograms.classList.toggle("is-hidden");
      secHeader.classList.toggle("is-black");
      updateWrapperHeight();
    });
  });
</script>
