---
import { getFileLink } from "../data/api";
interface CTA {
  type:
    | "default"
    | "outstanding"
    | "text"
    | "singleLine"
    | "multiLine"
    | "doc"
    | "link";

  text: string;
  action?: boolean;
  linkText?: string;
  linkHref?: string;
  value?: string;
  invert?: boolean;
  chooseFile?: {
    _type: string;
    asset: {
      _ref: string;
    };
  };
}

type Params = CTA;

const {
  type,
  text,
  action = false,
  linkText,
  linkHref,
  value,
  invert,
  chooseFile,
} = Astro.props as Params;

const fileLink = chooseFile && (await getFileLink(chooseFile.asset._ref));
---

{
  type === "default" && (
    <a class={invert ? "CTA-default-inverted" : "CTA-default"} href={linkHref}>
      {text}
    </a>
  )
}

{
  type === "outstanding" && action === true && (
    <div class="CTA-outstanding">
      <h2>{text}</h2>
      <a class="CTA-link" href={linkHref}>
        <h2>{linkText}</h2>
      </a>
    </div>
  )
}

{
  type === "outstanding" && action === false && (
    <div class="CTA-outstanding">
      <h2>{text}</h2>
    </div>
  )
}

{
  type === "text" && (
    <a class="CTA-text" href={linkHref}>
      {text}
    </a>
  )
}

{
  type === "singleLine" && (
    <div class="CTA-text">
      <h2>{text}</h2>
      <p>{value}</p>
    </div>
  )
}

{
  type === "multiLine" && (
    <div class="CTA-text">
      <h2>{text}</h2>
      <p>{value}</p>
    </div>
  )
}

{
  type === "link" && (
    <a class="CTA-text" href={value}>
      {text}
    </a>
  )
}

{
  type === "doc" && (
    <a class="CTA-default" href={fileLink}>
      {text}
    </a>
  )
}

<style>
  /* Default CTA styles */

  .CTA-default {
    border: 1px solid var(--black, #000);
    background-color: var(--white, #fff);
  }
  .CTA-default-inverted {
    border: 1px solid var(--white, #fff);
    background-color: var(--black, #000);
  }
  .CTA-default,
  .CTA-default-inverted {
    cursor: pointer;
    display: inline-flex;
    padding: 0.75rem 2rem;
    max-width: 25rem;
    min-width: 10rem;
    /* width: fit-content; */
    height: fit-content;
    justify-content: center;
    align-items: center;
    text-align: center;
    flex-shrink: 1;
    flex-grow: 0;
    text-transform: capitalize;

    margin: -1px 0 0 -1px;

    @media screen and (max-width: 1024px) {
      max-width: 320px;
    }
    @media screen and (max-width: 768px) {
      width: 50%;
    }
    @media screen and (max-width: 390px) {
      width: 100%;
      max-width: 100%;
    }
  }
  /* .CTA-default:hover {
    background-color: whitesmoke;
  } */

  /* Outstanding CTA styles */

  .CTA-outstanding {
    cursor: pointer;

    /* margin: 40px; */
    border-top: 2px solid var(--black, #000);
    padding: 0 40px;
    display: flex;
    /* width: 50%; */
    max-width: 800px;
    height: 500px;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    gap: 0;

    flex-shrink: 0;

    @media screen and (max-width: 1024px) {
      padding: 0 32px;
      max-width: 448px;
      height: 300px;
    }

    @media screen and (max-width: 768px) {
      padding: 0 24px;
      max-width: 332px;
      height: 225px;
    }
    @media screen and (max-width: 390px) {
      padding: 0 16px;
      height: 200px;
    }

    .CTA-link {
      display: inline;
      margin-top: -1em;

      h2 {
        display: inline;
      }
    }

    .CTA-link > h2::after {
      content: url(/arrow-black-20.svg);
      vertical-align: super;
      padding-left: 0.1em;
    }
    @media screen and (max-width: 1440px) {
      .CTA-link > h2::after {
        content: url(/arrow-black-14.svg);
      }
    }
    @media screen and (max-width: 768px) {
      .CTA-link > h2::after {
        content: url(/arrow-black-10.svg);
      }
    }
  }

  .CTA-text {
    cursor: pointer;
    font-size: 22px;
    /* Text CTA styles */
    text-decoration: underline;
  }
</style>
