---
import SectionLayout from "../../layouts/SectionLayout.astro";
import SideTab from "../../components/SideTab.astro";
import BasicLayout from "../../layouts/Layout.astro";
import { getPrograms } from "../../data/api.js";
import { urlFor } from "../../utils/image.js";
import { formatDateRange } from "../../utils/dateFormatting.js";
import type { Program } from "../../data/types.js";
import SectionLayoutRight from "../../layouts/SectionLayoutRight.astro";

const programs = await getPrograms();
const currentDate = new Date();
const pastPrograms = programs.filter(
  (program) => new Date(program.endDateTime) < currentDate
);

const programsByYear: { [key: string]: Program[] } = {};
pastPrograms.forEach((program) => {
  const endDate = new Date(program.endDateTime);
  const year = endDate.getFullYear();

  if (!programsByYear[year]) {
    programsByYear[year] = [];
  }
  programsByYear[year].push({
    ...program,
    coverImageUrl: program.coverImage ? urlFor(program.coverImage).url() : "",
    formattedDate: formatDateRange(
      `${program.startDateTime}â€”${program.endDateTime}`
    ),
  });
});

const sortedYears = Object.entries(programsByYear).sort(
  ([yearA], [yearB]) => parseInt(yearB) - parseInt(yearA)
);
---

<BasicLayout title="past seasons">
  <div data-top>
    <SideTab text="Programs" href="/programs" style="department" />
    <SideTab
      text="Current and Upcoming"
      style="subpage"
      href="/programs/current-upcoming"
      backGround="var(--white)"
      shadow="left"
      classes="current-tab"
    />
    <SectionLayoutRight>
      <h2 class="title">Past Seasons</h2>
      <div class="filters caption">
    <ul>
      <li>Filter by Event Types</li>
      <li>
        <ul>
          <li>Screening</li>
          <li>Performance</li>
          <li>Workshop</li>
          <li>Concert</li>
          <li>Book Talk</li>
          <li>Conversation</li>
          <li>Fundraiser</li>
          <li>Community Event</li>
        </ul>
      </li>
    </ul>
<!-- TODO: Map out all tags from Programs -->
    <ul>
      <li>Filter by Tags</li>
      <li>
        <ul>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
        </ul>
      </li>
    </ul>
  </div>
      <div class="seasons-wrapper" x-data="past">
        <ul class="list-season-title">
          <template
            x-for="[season, programs], index in sortedYears"
            :key="season"
          >
            <li
              class="season-title gray-out"
              :class="{'gray-out': selectedSeason !== index}"
              @click="selectSeason(index)"
            >
              <h3 x-text="season.split(' ').pop()"></h3>
            </li>
          </template>
        </ul>

        <template
          x-for="[season, programs], index in sortedYears"
          :key="season"
        >
          <ul
            :id="season.split(' ').pop()"
            class="list-past-programs"
            x-show="selectedSeason === index"
          >
            <template x-for="program in programs" :key="program._id">
              <li class="list-item">
                <a data-link :href="`/programs/${program.slug.current}`">
                  <img
                    :src="program.coverImageUrl"
                    :alt="program.name"
                    x-show="program.coverImage"
                  />
                  <h4 x-text="program.name"></h4>

                  <ul>
                    <li class="caption gray-out" x-text="program.type"></li>
                    <li class="caption" x-text="program.formattedDate"></li>
                  </ul>
                </a>
              </li>
            </template>
          </ul>
        </template>
      </div>
    </SectionLayoutRight>
  </div>
</BasicLayout>

<style lang="scss">
  .seasons-wrapper {
    min-height: 100vh;
    padding: var(--l-margin);

    .list-season-title {
      padding: 4rem 0;
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;

      .season-title {
        padding: 4px 8px;
        cursor: pointer;
        transition: all 100ms;
        &:hover {
          transform: translateY(-2px);
          box-shadow: 2px 2px 0 2px black;
        }
      }
    }
  }

  .list-past-programs {
    padding: 0;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-around;
    // align-items: center;
    gap: calc(2 * var(--l-margin));
    margin-bottom: var(--l-margin);

    .list-item {
      max-width: 440px;

      margin: var(--l-margin) 0;

      [data-link] {
        display: flex;
        flex-direction: column;
        text-align: center;
        transition: color 100ms var(--ease);
        img {
          object-fit: contain;
          width: auto;
          height: auto;
          max-height: 440px;
          transition: transform 100ms var(--ease);
          padding-bottom: 12px;
          &:hover {
            transform: translateY(-5px);
          }
        }
      }
      .caption {
        text-transform: capitalize;
      }
    }
  }

  .is-hidden {
    display: none;
  }

  .filters,
  .filters > *,
  .filters > * > *,
  .filters > * > * > *,
  .filters > * > * > * > * {
    display: flex;
    column-gap: 1rem;
    color: var(--darkGray);
    font-size: var(--caption-font-size);
  }
  .filters {
    justify-content: space-between;
  }
  .filters > * {
    flex-direction: column;
  }
</style>

<script async define:vars={{ sortedYears }}>
  // const seasonTitle = document.querySelectorAll(".season-title");
  // const seasonList = document.querySelectorAll(".list-past-programs");

  // // Hide all lists
  // seasonList.forEach((list) => {
  //   list.classList.add("is-hidden");
  // });

  // // Show the first season list by default
  // seasonList[0].classList.remove("is-hidden");
  // seasonTitle[0].classList.remove("gray-out");

  // seasonTitle.forEach((title, i) => {
  //   title.addEventListener("click", () => {
  //     // Hide all lists
  //     seasonList.forEach((list) => {
  //       list.classList.add("is-hidden");
  //     });

  //     // Show the clicked list
  //     seasonList[i].classList.remove("is-hidden");

  //     // Remove 'gray-out' class from all titles
  //     seasonTitle.forEach((title) => {
  //       title.classList.add("gray-out");
  //     });

  //     // Remove 'gray-out' class from clicked title
  //     title.classList.remove("gray-out");
  //   });
  // });
  document.addEventListener("alpine:init", () => {
    Alpine.data("past", () => ({
      selectedSeason: 0,
      get sortedYears() {
        return sortedYears;
      },
      selectSeason(index) {
        this.selectedSeason = index;
      },
    }));
  });
</script>
