---
import type { InferGetStaticParamsType } from "astro";
import { PortableText } from "astro-portabletext";
import ProgramLayout from "../../layouts/ProgramLayout.astro";
import ProgramCard from "../../components/ProgramCard.astro";
import {
  getPrograms,
  getProgramBySlug,
  getProgramByRef,
  getArtistByRef,
} from "../../data/api";
import { urlFor } from "../../utils/image";
import Carousel from "../../components/Carousel.astro";
import SecHeader from "../../components/SecHeader.astro";

export async function getStaticPaths() {
  const programs = await getPrograms();
  return programs.map((program) => ({
    params: { slug: program.slug.current },
  }));
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
const { slug } = Astro.params as Params;

const program = await getProgramBySlug(slug);

program.relatedPrograms = program.relatedPrograms || [];
const relatedBlocks = await Promise.all(
  program.relatedPrograms.map(async (block) => {
    const programResult = await getProgramByRef(block._ref);
    const artistResult = await getArtistByRef(block._ref);
    return programResult || artistResult;
  })
);

function toTitleCase(str: string) {
  const titleCase = str
    .toLowerCase()
    .split("-")
    .map((word: string) => {
      return word.charAt(0).toUpperCase() + word.slice(1);
    })
    .join(" ");
  return titleCase;
}
---
 
<ProgramLayout
  pageTitle={program.name}
  bannerSrc={program.coverImage ? urlFor(program.coverImage).url() : ""}
  ctas={program.cta || []}
  frontCaptions={program.frontCaptions}
  tags={program.tags}
>
  <section class="body-copy">
    <!-- <h1>{program.name}</h1> -->
    <PortableText value={program.description} />
  </section>

  {
    program.images && (
        <SecHeader title="Installation View" />
        <Carousel
          images={program.images}
          alt={program.images.map((image) => image.alt)}
        />
    )
  }

  <div class="related">
    { relatedBlocks &&
      relatedBlocks.map((block) => (
        <div class="leaf-wrapper">

            {block._type === "artist" && (
            <a href={`/archive/artists/${block.slug.current}`} style={{pointerEvents: "none"}}>
            <div class="related-leaf">
            <h2>{block.name}</h2>
              <img style="object-fit: cover; margin-top: 1em; max-width: 100%; height: 75%; width: auto;" src={urlFor(block.image.asset).url()} alt="" />
            </div>
            </a>
            )} 

            {block._type === "program" && (
            <a href={`/programs/${block.slug.current}`} style={{pointerEvents: "none"}}>
            <div class="related-leaf">
            <h2>{block.name}</h2>
            <div class="caption" style="text-transform: capitalize;">
              {block._type}
              {
            block.eventTypes &&
              block.eventTypes.map((eventType, index) => (
                <span>
                  {index === 0 && <span> | </span>}
                  {eventType}
                </span>
              ))
          }
              
            </div>
              <img style="object-fit: cover; margin-top: 1em;" src={urlFor(block.coverImage).url()} alt="" />
              </div>
            </a>
            )}
          </div>

      ))
    }
  </div>
</ProgramLayout>
<style lang="scss">
  .related {
    position: relative;
    height: min-content;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    transition: 800ms;
    margin-left: var(--l-margin);
    margin-bottom: 4rem;

    .leaf-wrapper {
      width: 100%;
      overflow: hidden;
      box-shadow: -8px 0px 8px 0px rgba(0, 0, 0, 0.1);
      height: fit-content;
      cursor: pointer;
    }

    .related-leaf {
      background-color: var(--white);
      width: 100vw;
      height: fit-content;
      height: 100vh;
      overflow: hidden;
      padding: var(--l-margin);
      padding-bottom: 0;
      flex: 1;
    }
  }
</style>
<script async>
  const relatedSection = document.querySelector(".related");
  const leafs = relatedSection.querySelectorAll(".leaf-wrapper");

  leafs.forEach((element, i) => {
    let columns = '1fr 1fr 1fr';
    element.addEventListener("click", () => {
      console.log(i);
      if (i === 0) {
        columns = "2fr 0.5fr 0.5fr";
      } else if (i === 1) {
        columns = "0.5fr 2fr 0.5fr";
      } else if (i === 2) {
        columns = "0.5fr 0.5fr 2fr";
      }
      relatedSection.style.gridTemplateColumns = columns;
      console.log(element.querySelector("a"))
      element.querySelector("a").style.pointerEvents = "auto"
    });

    element.addEventListener("mouseleave", () => {
      columns = '1fr 1fr 1fr';
      relatedSection.style.gridTemplateColumns = columns;
      element.querySelector("a").style.pointerEvents = "none"
    })
  });


</script>
